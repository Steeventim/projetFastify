const { User, Role, UserRoles, TypeProjet, Etape, EtapeTypeProjet, sequelize } = require('../models');
const bcrypt = require('bcrypt');
const { v4: uuidv4 } = require('uuid');

/**
 * Script d'initialisation du workflow DGI
 * 
 * USE CASE: Transmission et Validation d'un Document de Recouvrement √† la DGI
 * 
 * ACTEURS PRINCIPAUX:
 * - Utilisateur Secr√©tariat (Scanneur ou Agent de recherche)
 * - Directeur G√©n√©ral des Imp√¥ts (DGI)
 * - Directeur du Recouvrement (DIR)
 * - Sous-directeur
 * - Cadre responsable du recouvrement
 * - Syst√®me (Application BPM avec moteur de recherche)
 * 
 * WORKFLOW EN 5 √âTAPES:
 * 1. Saisie/Scan Initial - Agent secr√©tariat scanne/recherche et indexe le document
 * 2. Validation DGI - DGI valide et annote avec stylet, transmission au DIR
 * 3. Analyse DIR - Directeur Recouvrement analyse, annote et quote au sous-directeur
 * 4. Traitement Sous-Directeur - Sous-directeur annote et quote au collaborateur
 * 5. Traitement Collaborateur - Cadre √©labore r√©ponse, validation/rejet avec chemin inverse
 * 
 * FLUX ALTERNATIFS:
 * - Rejet: Le document reprend le chemin inverse jusqu'√† signature du DGI
 * - Validation: Projet de r√©ponse adress√© au DGI pour signature
 * - Timeout: Transmission automatique au N+1 si d√©lai d√©pass√©
 * 
 * B√âN√âFICES:
 * - Suivi temps r√©el, tra√ßabilit√© compl√®te, r√©duction risques
 * - Centralisation d√©cisions, fluidification circuit, horodatage/signature num√©rique
 */

async function initDgiWorkflow() {
  const transaction = await sequelize.transaction();
  
  try {
    console.log('üöÄ D√©but de l\'initialisation du workflow DGI...');

    // 1. Cr√©ation des r√¥les DGI
    console.log('üìã Cr√©ation des r√¥les DGI...');
      const roles = [
      {
        name: 'secretariat_scanneur',
        description: 'Agent du secr√©tariat - Scanneur ou Agent de recherche',
        isSystemRole: false,
        permissions: ['document:create', 'document:search', 'document:upload', 'document:index']
      },
      {
        name: 'dgi_directeur',
        description: 'Directeur G√©n√©ral des Imp√¥ts (DGI)',
        isSystemRole: false,
        permissions: ['document:read', 'document:validate', 'document:annotate', 'document:forward', 'document:sign']
      },
      {
        name: 'directeur_recouvrement',
        description: 'Directeur du Recouvrement (DIR)',
        isSystemRole: false,
        permissions: ['document:read', 'document:validate', 'document:annotate', 'document:forward', 'document:quote']
      },
      {
        name: 'sous_directeur',
        description: 'Sous-directeur',
        isSystemRole: false,
        permissions: ['document:read', 'document:validate', 'document:annotate', 'document:forward', 'document:quote']
      },
      {
        name: 'cadre_recouvrement',
        description: 'Cadre responsable du recouvrement',
        isSystemRole: false,
        permissions: ['document:read', 'document:process', 'document:annotate', 'document:validate', 'document:reject', 'document:elaborate_response']
      }
    ];

    const createdRoles = {};
    for (const roleData of roles) {
      const [role, created] = await Role.findOrCreate({
        where: { name: roleData.name },
        defaults: {
          idRole: uuidv4(),
          ...roleData
        },
        transaction
      });
      createdRoles[roleData.name] = role;
      console.log(`‚úÖ R√¥le ${roleData.name}: ${created ? 'cr√©√©' : 'existe d√©j√†'}`);
    }

    // 2. Cr√©ation du TypeProjet "Recouvrement DGI"
    console.log('üìÇ Cr√©ation du type de projet...');
    
    const [typeProjet, typeCreated] = await TypeProjet.findOrCreate({
      where: { Libelle: 'Recouvrement DGI' },
      defaults: {
        idType: uuidv4(),
        Libelle: 'Recouvrement DGI',
        Description: 'Workflow de traitement des documents de recouvrement fiscal'
      },
      transaction
    });
    console.log(`‚úÖ TypeProjet "Recouvrement DGI": ${typeCreated ? 'cr√©√©' : 'existe d√©j√†'}`);

    // 3. Cr√©ation des √©tapes du workflow
    console.log('üîÑ Cr√©ation des √©tapes du workflow...');
      const etapes = [
      {
        LibelleEtape: 'Saisie/Scan Initial',
        Description: 'L\'agent du secr√©tariat scanne ou recherche un document existant via le moteur de recherche int√©gr√©. Le document est identifi√©, index√© et inject√© dans le workflow BPM.',
        sequenceNumber: 1,
        Validation: false,
        roleId: createdRoles.secretariat_scanneur.idRole
      },
      {
        LibelleEtape: 'Validation DGI',
        Description: 'Le document est transmis automatiquement au poste de la DGI, accompagn√© des m√©tadonn√©es. Le DGI porte des annotations sur le fichier avec un stylet avant transmission au Directeur du Recouvrement.',
        sequenceNumber: 2,
        Validation: true,
        roleId: createdRoles.dgi_directeur.idRole
      },
      {
        LibelleEtape: 'Analyse Directeur Recouvrement',
        Description: 'Le Directeur du recouvrement analyse le fichier, prend connaissance des annotations du DGI. Quote le dossier au Sous-directeur en y apportant des mentions et des orientations avec un stylet.',
        sequenceNumber: 3,
        Validation: true,
        roleId: createdRoles.directeur_recouvrement.idRole
      },
      {
        LibelleEtape: 'Traitement Sous-Directeur',
        Description: 'Le Sous-directeur prend connaissance des orientations du DGI et du Directeur du Recouvrement avant de porter ses propres annotations et de quoter le dossier au collaborateur charg√© de le traiter.',
        sequenceNumber: 4,
        Validation: true,
        roleId: createdRoles.sous_directeur.idRole
      },      {
        LibelleEtape: 'Traitement Collaborateur',
        Description: 'Le cadre responsable re√ßoit le document, l\'analyse et √©labore un projet de r√©ponse. Ce projet est transmis √† la hi√©rarchie pour validation ou rejet. Le dossier suit le chemin inverse jusqu\'au DGI.',
        sequenceNumber: 5,
        Validation: true,
        roleId: createdRoles.cadre_recouvrement.idRole
      }
    ];

    const createdEtapes = [];
    for (const etapeData of etapes) {
      const [etape, etapeCreated] = await Etape.findOrCreate({
        where: { 
          LibelleEtape: etapeData.LibelleEtape,
          sequenceNumber: etapeData.sequenceNumber
        },
        defaults: {
          idEtape: uuidv4(),
          ...etapeData
        },
        transaction
      });
      createdEtapes.push(etape);
      console.log(`‚úÖ √âtape ${etapeData.sequenceNumber} "${etapeData.LibelleEtape}": ${etapeCreated ? 'cr√©√©e' : 'existe d√©j√†'}`);
    }

    // 4. Association des √©tapes au TypeProjet
    console.log('üîó Association des √©tapes au type de projet...');
    
    for (const etape of createdEtapes) {
      const [association, associationCreated] = await EtapeTypeProjet.findOrCreate({
        where: {
          etapeId: etape.idEtape,
          idType: typeProjet.idType
        },
        defaults: {
          etapeId: etape.idEtape,
          idType: typeProjet.idType
        },
        transaction
      });
      console.log(`‚úÖ Association √©tape "${etape.LibelleEtape}" ‚Üí TypeProjet: ${associationCreated ? 'cr√©√©e' : 'existe d√©j√†'}`);
    }

    // 5. Cr√©ation d'utilisateurs de test (optionnel)
    console.log('üë• Cr√©ation d\'utilisateurs de test...');
    
    const testUsers = [
      {
        Email: 'secretariat@dgi.gov',
        Password: 'SecretariatDGI2024!',
        NomUser: 'Agent',
        PrenomUser: 'Secr√©tariat',
        Telephone: '+228123456789',
        roleName: 'secretariat_scanneur'
      },
      {
        Email: 'directeur.general@dgi.gov',
        Password: 'DirecteurDGI2024!',
        NomUser: 'Directeur',
        PrenomUser: 'G√©n√©ral',
        Telephone: '+228123456790',
        roleName: 'dgi_directeur'
      },
      {
        Email: 'directeur.recouvrement@dgi.gov',
        Password: 'DirecteurRecouv2024!',
        NomUser: 'Directeur',
        PrenomUser: 'Recouvrement',
        Telephone: '+228123456791',
        roleName: 'directeur_recouvrement'
      },
      {
        Email: 'sous.directeur@dgi.gov',
        Password: 'SousDirecteur2024!',
        NomUser: 'Sous',
        PrenomUser: 'Directeur',
        Telephone: '+228123456792',
        roleName: 'sous_directeur'
      },
      {
        Email: 'cadre.recouvrement@dgi.gov',
        Password: 'CadreRecouv2024!',
        NomUser: 'Cadre',
        PrenomUser: 'Recouvrement',
        Telephone: '+228123456793',
        roleName: 'cadre_recouvrement'
      }
    ];

    for (const userData of testUsers) {
      try {
        const [user, userCreated] = await User.findOrCreate({
          where: { Email: userData.Email },
          defaults: {
            idUser: uuidv4(),
            Email: userData.Email,
            Password: userData.Password,
            NomUser: userData.NomUser,
            PrenomUser: userData.PrenomUser,
            Telephone: userData.Telephone,
            IsActive: true
          },
          transaction
        });

        if (userCreated || !await UserRoles.findOne({ 
          where: { 
            userId: user.idUser, 
            roleId: createdRoles[userData.roleName].idRole 
          },
          transaction 
        })) {
          await UserRoles.create({
            id: uuidv4(),
            userId: user.idUser,
            roleId: createdRoles[userData.roleName].idRole
          }, { transaction });
          console.log(`‚úÖ Utilisateur ${userData.Email} (${userData.roleName}): ${userCreated ? 'cr√©√©' : 'r√¥le associ√©'}`);
        } else {
          console.log(`‚ÑπÔ∏è  Utilisateur ${userData.Email}: existe d√©j√† avec le bon r√¥le`);
        }
      } catch (userError) {
        console.log(`‚ö†Ô∏è  Erreur pour l'utilisateur ${userData.Email}: ${userError.message}`);
      }
    }

    await transaction.commit();
    console.log('üéâ Workflow DGI initialis√© avec succ√®s !');
    
    // Affichage du r√©sum√©
    console.log('\nüìä R√âSUM√â DE L\'INITIALISATION:');
    console.log('================================');
    console.log(`‚úÖ ${roles.length} r√¥les DGI cr√©√©s/v√©rifi√©s`);
    console.log(`‚úÖ 1 type de projet "Recouvrement DGI" cr√©√©/v√©rifi√©`);
    console.log(`‚úÖ ${etapes.length} √©tapes de workflow cr√©√©es/v√©rifi√©es`);
    console.log(`‚úÖ ${testUsers.length} utilisateurs de test cr√©√©s/v√©rifi√©s`);
    console.log('\nüîÑ WORKFLOW CONFIGUR√â:');
    etapes.forEach((etape, index) => {
      console.log(`   ${index + 1}. ${etape.LibelleEtape}`);
    });
    console.log('\nüéØ Le workflow DGI est pr√™t √† √™tre utilis√© !');

  } catch (error) {
    await transaction.rollback();
    console.error('‚ùå Erreur lors de l\'initialisation du workflow DGI:', error);
    throw error;
  }
}

// Fonction utilitaire pour afficher les informations du workflow
async function displayWorkflowInfo() {
  try {
    console.log('\nüìã INFORMATIONS DU WORKFLOW DGI:');
    console.log('==================================');
    
    const typeProjet = await TypeProjet.findOne({
      where: { Libelle: 'Recouvrement DGI' },
      include: [{
        model: Etape,
        as: 'Etapes',
        include: [{
          model: Role,
          as: 'role'
        }],
        order: [['sequenceNumber', 'ASC']]
      }]
    });

    if (typeProjet) {
      console.log(`üìÇ Type de projet: ${typeProjet.Libelle}`);
      console.log(`üìù Description: ${typeProjet.Description}`);
      console.log('\nüîÑ √âtapes du workflow:');
      
      if (typeProjet.Etapes) {
        typeProjet.Etapes.forEach(etape => {
          console.log(`   ${etape.sequenceNumber}. ${etape.LibelleEtape}`);
          console.log(`      üë§ R√¥le: ${etape.role?.name || 'Non d√©fini'}`);
          console.log(`      ‚úÖ Validation: ${etape.Validation ? 'Oui' : 'Non'}`);
          console.log('');
        });
      }
    } else {
      console.log('‚ùå Workflow DGI non trouv√©. Ex√©cutez d\'abord l\'initialisation.');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'affichage des informations:', error);
  }
}

// Ex√©cution du script
if (require.main === module) {
  initDgiWorkflow()
    .then(() => {
      return displayWorkflowInfo();
    })
    .then(() => {
      console.log('\n‚ú® Script termin√© avec succ√®s !');
      process.exit(0);
    })
    .catch(error => {
      console.error('üí• Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = {
  initDgiWorkflow,
  displayWorkflowInfo
};
