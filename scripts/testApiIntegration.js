#!/usr/bin/env node

/**
 * Test d'int√©gration API - Workflow DGI
 * D√©montre l'utilisation des endpoints existants pour le workflow
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3003';
let authTokens = {};

// Configuration des utilisateurs de test
const testUsers = {
  secretariat: { email: 'secretariat@dgi.gov', password: 'secretariat123' },
  dgi: { email: 'directeur.general@dgi.gov', password: 'dgi123' },
  directeur: { email: 'directeur.recouvrement@dgi.gov', password: 'directeur123' },
  sous_directeur: { email: 'sous.directeur@dgi.gov', password: 'sousdirecteur123' },
  cadre: { email: 'cadre.recouvrement@dgi.gov', password: 'cadre123' }
};

// Fonction d'authentification
async function login(userType) {
  try {
    const user = testUsers[userType];
    const response = await axios.post(`${BASE_URL}/users/login`, {
      Email: user.email,
      Password: user.password
    });
    
    authTokens[userType] = response.data.token;
    console.log(`‚úÖ ${userType} connect√© avec succ√®s`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Erreur connexion ${userType}:`, error.response?.data || error.message);
    return null;
  }
}

// Fonction pour faire des requ√™tes authentifi√©es
async function apiCall(method, endpoint, data = null, userType = 'secretariat') {
  try {
    const config = {
      method,
      url: `${BASE_URL}${endpoint}`,
      headers: {
        'Authorization': `Bearer ${authTokens[userType]}`,
        'Content-Type': 'application/json'
      }
    };
    
    if (data) {
      config.data = data;
    }
    
    const response = await axios(config);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Erreur API ${method} ${endpoint}:`, error.response?.data || error.message);
    throw error;
  }
}

// Test 1: Recherche de documents (simulation d'entr√©e dans le workflow)
async function testDocumentSearch() {
  console.log('\nüîç TEST 1: Recherche de Documents');
  console.log('=====================================');
  
  try {
    // Recherche de propositions (simule la recherche d'un document de recouvrement)
    const searchTerm = 'recouvrement';
    const searchResponse = await axios.get(`${BASE_URL}/search-propositions/${encodeURIComponent(searchTerm)}`);
    
    console.log('‚úÖ Recherche effectu√©e avec succ√®s');
    console.log(`üìä R√©sultats trouv√©s: ${searchResponse.data.data?.hits?.total?.value || 0}`);
    
    return searchResponse.data;
  } catch (error) {
    console.log('‚ÑπÔ∏è  Service de recherche indisponible (normal si Elasticsearch n\'est pas connect√©)');
    return { mockResults: true };
  }
}

// Test 2: Cr√©ation d'un document dans le workflow
async function testCreateDocument() {
  console.log('\nüìÑ TEST 2: Cr√©ation Document dans le Workflow');
  console.log('=============================================');
  
  try {
    // Obtenir la premi√®re √©tape du workflow DGI
    const etapes = await apiCall('GET', '/etapes', null, 'secretariat');
    const etapeInitiale = etapes.find(e => e.LibelleEtape === 'Saisie/Scan Initial');
    
    if (!etapeInitiale) {
      console.error('‚ùå √âtape initiale non trouv√©e');
      return null;
    }
    
    // Cr√©er un document
    const documentData = {
      Title: 'Test Recouvrement API - Entreprise XYZ',
      etapeId: etapeInitiale.idEtape,
      status: 'pending',
      transferStatus: 'pending',
      UserDestinatorName: 'Directeur G√©n√©ral DGI',
      url: 'http://localhost:3000/documents/test_recouvrement_xyz.pdf'
    };
    
    const document = await apiCall('POST', '/documents', documentData, 'secretariat');
    console.log('‚úÖ Document cr√©√© avec succ√®s');
    console.log(`üìÑ ID: ${document.idDocument}`);
    console.log(`üìç √âtape: ${etapeInitiale.LibelleEtape}`);
    
    return document;
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation document:', error.message);
    return null;
  }
}

// Test 3: Affectation d'√©tape (transmission du document)
async function testWorkflowTransition(documentId) {
  console.log('\nüîÑ TEST 3: Transmission dans le Workflow');
  console.log('========================================');
  
  try {
    // Agent secr√©tariat ajoute un commentaire et transmet
    const secretariatUser = await apiCall('GET', '/users/me', null, 'secretariat');
    
    const transmissionData = {
      documentId: documentId,
      userId: secretariatUser.idUser,
      commentaire: 'Document scann√© et v√©rifi√©. Montant: 15,000‚Ç¨. Transmission vers DGI pour validation.',
      UserDestinatorName: 'Directeur G√©n√©ral DGI',
      nextEtapeName: 'Validation DGI'
    };
    
    const result = await apiCall('POST', '/etapes/affect-document', transmissionData, 'secretariat');
    console.log('‚úÖ Document transmis avec succ√®s');
    console.log(`üì§ Vers: ${transmissionData.UserDestinatorName}`);
    console.log(`üí¨ Commentaire ajout√©`);
    
    return result;
  } catch (error) {
    console.error('‚ùå Erreur transmission:', error.message);
    return null;
  }
}

// Test 4: Consultation des documents en attente par r√¥le
async function testPendingDocuments(userType) {
  console.log(`\nüìã TEST 4: Documents en attente (${userType})`);
  console.log('==========================================');
  
  try {
    // Obtenir les documents pour l'utilisateur connect√©
    const documents = await apiCall('GET', '/documents', null, userType);
    
    const pendingDocs = documents.filter(doc => 
      doc.status === 'pending' && 
      doc.transferStatus !== 'viewed'
    );
    
    console.log(`‚úÖ ${pendingDocs.length} document(s) en attente`);
    
    pendingDocs.forEach((doc, index) => {
      console.log(`${index + 1}. ${doc.Title}`);
      console.log(`   üìç √âtape: ${doc.etape?.LibelleEtape || 'Non d√©finie'}`);
      console.log(`   üìä Statut: ${doc.status}`);
      console.log(`   üë§ Destinataire: ${doc.UserDestinatorName}`);
    });
    
    return pendingDocs;
  } catch (error) {
    console.error('‚ùå Erreur consultation documents:', error.message);
    return [];
  }
}

// Test 5: Ajout de commentaire/annotation
async function testAddComment(documentId, userType) {
  console.log(`\nüí¨ TEST 5: Ajout Commentaire (${userType})`);
  console.log('=====================================');
  
  try {
    const user = await apiCall('GET', '/users/me', null, userType);
    
    const commentData = {
      Contenu: `Annotation ${userType}: Document analys√© et valid√©. Transmission autoris√©e vers l'√©tape suivante.`,
      documentId: documentId,
      userId: user.idUser
    };
    
    const comment = await apiCall('POST', '/commentaires', commentData, userType);
    console.log('‚úÖ Commentaire ajout√© avec succ√®s');
    console.log(`üí¨ "${commentData.Contenu}"`);
    
    return comment;
  } catch (error) {
    console.error('‚ùå Erreur ajout commentaire:', error.message);
    return null;
  }
}

// Test 6: Consultation de l'historique complet
async function testDocumentHistory(documentId) {
  console.log('\nüìä TEST 6: Historique du Document');
  console.log('=================================');
  
  try {
    const document = await apiCall('GET', `/documents/${documentId}`, null, 'secretariat');
    
    console.log(`üìÑ Document: ${document.Title}`);
    console.log(`üìä Statut: ${document.status}`);
    console.log(`üìç √âtape actuelle: ${document.etape?.LibelleEtape || 'Non d√©finie'}`);
    console.log(`üë§ Destinataire: ${document.UserDestinatorName}`);
    
    if (document.commentaires && document.commentaires.length > 0) {
      console.log('\nüìù Historique des commentaires:');
      document.commentaires.forEach((comment, index) => {
        console.log(`${index + 1}. ${comment.user?.PrenomUser} ${comment.user?.NomUser}`);
        console.log(`   üí¨ "${comment.Contenu}"`);
        console.log(`   üïê ${new Date(comment.createdAt).toLocaleString()}`);
      });
    }
    
    return document;
  } catch (error) {
    console.error('‚ùå Erreur consultation historique:', error.message);
    return null;
  }
}

// Test 7: WebSocket (simulation)
async function testWebSocketNotifications() {
  console.log('\nüîî TEST 7: Notifications WebSocket');
  console.log('==================================');
  
  console.log('‚ÑπÔ∏è  Les notifications WebSocket sont configur√©es sur le serveur');
  console.log('üì° Endpoint: ws://localhost:3003');
  console.log('üîÑ √âv√©nements disponibles:');
  console.log('   ‚Ä¢ connection - Connexion utilisateur');
  console.log('   ‚Ä¢ sendNotification - Envoi notification');
  console.log('   ‚Ä¢ notification - R√©ception notification');
  console.log('   ‚Ä¢ disconnect - D√©connexion utilisateur');
  
  console.log('\nüí° Exemple d\'int√©gration frontend:');
  console.log(`
  const socket = io('http://localhost:3003');
  
  socket.on('notification', (data) => {
    console.log('Nouvelle notification:', data);
    // Mettre √† jour l'interface utilisateur
  });
  
  // Envoyer une notification
  socket.emit('sendNotification', {
    type: 'workflow_transition',
    documentId: '${documentId}',
    message: 'Document transmis vers l\\'√©tape suivante',
    userId: 'user-id'
  });`);
}

// Fonction principale de test
async function runIntegrationTests() {
  console.log('üß™ TESTS D\'INT√âGRATION API - WORKFLOW DGI');
  console.log('==========================================\n');
  
  // Phase 1: Authentification
  console.log('üîê PHASE 1: Authentification des utilisateurs');
  console.log('=============================================');
  
  for (const userType of Object.keys(testUsers)) {
    await login(userType);
  }
  
  // Phase 2: Tests des fonctionnalit√©s
  let documentId;
  
  try {
    // Test recherche
    await testDocumentSearch();
    
    // Test cr√©ation document
    const document = await testCreateDocument();
    if (document) {
      documentId = document.idDocument;
      
      // Test transmission
      await testWorkflowTransition(documentId);
      
      // Test consultation par diff√©rents r√¥les
      for (const userType of ['dgi', 'directeur', 'sous_directeur']) {
        await testPendingDocuments(userType);
      }
      
      // Test ajout commentaires
      await testAddComment(documentId, 'dgi');
      
      // Test historique
      await testDocumentHistory(documentId);
    }
    
    // Test WebSocket
    await testWebSocketNotifications();
    
  } catch (error) {
    console.error('‚ùå Erreur dans les tests:', error.message);
  }
  
  console.log('\nüéâ TESTS D\'INT√âGRATION TERMIN√âS');
  console.log('================================');
  console.log('‚úÖ Le backend est pr√™t pour l\'int√©gration frontend');
  console.log('üìã Consultez le guide d\'int√©gration dans docs/FRONTEND_INTEGRATION_GUIDE.md');
  
  if (documentId) {
    console.log(`\nüîó Document de test cr√©√©: ${documentId}`);
    console.log('Vous pouvez l\'utiliser pour vos tests frontend');
  }
}

// Ex√©cution des tests
runIntegrationTests().catch(console.error);
